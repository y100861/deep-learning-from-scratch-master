# 계단함수
def step_function(x):
  y = x > 0
  return y.astype(np.int64)


# Sigmoid
def sigmoid(x):
  return 1 / (1 + exp(-x))


# ReLU
def relu(x):
  return np.maximum(x, 0)


# Softmax
def softmax(x):
  if x.ndim == 2:
    x = x.T
    x = x - np.max(x, axis=0) # 오버플로 대책
    sum_exp_x = np.sum(x, axis=0)
    y = np.exp(x) / sum_exp_x

    return y.T

  x = x - np.max(x) # 오버플로 대책
  sum_exp_x = np.sum(exp_x)

  return np.exp(x) / sum_exp_x
