class SGD:
    def __init__(self, lr=0.01):
        self.lr = lr
    
    def update(self, params, grads):
        for key, val in params.items():
            params[key] -= self.lr * grads[key]


class Momentum:
    def __init__(self, lr=0.01, momentum=0.9):
        self.v = None
        self.lr = lr
        self.momentum = momentum
    
    def update(self, params, grads):
            if self.v is None:
                self.v = {}
                for key, val in params.items():
                    self.v[key] = np.zeros_like(val)

            for key, val in params.items():
                self.v[key] = (self.momentum * self.v[key]) - (self.lr * grads[key])
                params[key] += self.v[key]


class AdaGrad:
    def __init__(self, lr=0.01):
        self.h = None
        self.lr = lr

    def update(self, params, grads):
        if self.h is None:
            self.h = {}
            for key, val in params.items():
                self.h[key] = np.zeros_like(val)
        
        for key, val in params.items():
            self.h[key] += grads[key] * grads[key]
            params[key] -= (self.lr / (np.sqrt(self.h[key]) + 1e-7)) * grads[key]


  class RMSProp:
    def __init__(self, lr=0.01, decay_rate=0.99):
        self.h = None
        self.lr = lr
        self.decay_rate = decay_rate
    
    def update(self, params, grads):
        if self.h is None:
            self.h = {}
            for key, val in params.items():
                self.h[key] = np.zeros_like(val)
        
        for key, val in params.items():
            self.h[key] = (self.decay_rate * self.h[key]) + ((1 - self.decay_rate) * grads[key] * grads[key])
            params[key] -= (self.lr * grads[key]) / (np.sqrt(self.h[key]) + 1e-7)
