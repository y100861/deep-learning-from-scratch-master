# BatchNormalization(배치 정규화)
class BatchNormalization:
    def __init__(self, gamma, beta, momentum=0.9, running_mean=None, running_var=None):
        self.gamma = gamma
        self.beta = beta
        self.momentum = momentum
        self.running_mean = running_mean
        self.running_var = running_var
        self.input_shape = None # 합성곱 계층은 4차원, 완전연결 계층은 2차원

        # 역전파 시에 사용할 중간 데이터
        self.batch_size = None
        self.xc = None
        self.std = None
        self.dgamma = None
        self.dbeta = None
    
    def forward(self, x, is_train=True):
        self.input_shape = x.shape

        if x.ndim != 2:
            N, C, H, W = x.shape # 합성곱신경망일 때
            x = x.reshape(N, -1)
        
        out = self.__forward(x, is_train)

        return out.reshape(*self.input_shape)
    
    def __forward(self, x, train_flg=True):
        if self.running_mean is None:
            N, D = x.shape
            self.running_mean = np.zeros(D)
            self.running_var = np.zeros(D)
        
        if train_flg == True:
            mu = np.mean(x, axis=0)
            xc = x - mu
            var = np.mean(xc**2, axis=0)
            std = np.sqrt(var + 10e-7)
            xn = xc / std

            self.batch_size = x.shape[0]
            self.xc = xc
            self.xn = xn
            self.std = std

            # 배치가 끝날 때마다 측정되는 평균과 분산을 메모리에 저장해서 정규화를 위한 계산을 할 때 써야 함
            # 평균과 분산 값들이 다음 통계를 업데이트할 때 얼마나 영향을 받을 수 있게 할지 조절하는 값이 momentum임
            self.running_mean = self.momentum * self.running_mean + (1 - self.momentum) * mu
            self.running_var = self.momentum * self.running_var + (1 - self.momentum) * var
        else:
            xc = x - self.running_mean
            xn = xc / np.sqrt(self.running_var + 10e-7)

        out = self.gamma * xn + self.beta
        return out
    
    def backward(self, dout):
        if dout.ndim != 2:
            N, C, H, W = dout.shape
            dout = dout.reshape(N, -1)
        
        dx = self.__backward(dout)

        return dx.reshape(*self.input_shape)
    
    def __backward(self, dout):
        dbeta = np.sum(dout, axis=0)
        dgamma = np.sum(self.xn * dout, axis=0)
        dxn = self.gamma * dout
        dxc = dxn / self.std
        dstd = -np.sum(self.xc * dxn / (self.std * self.std), axis=0)
        dvar = 0.5 * dstd / self.std
        dxc += (2.0 / self.batch_size) * self.xc * dvar
        dmu = -np.sum(dxc, axis=0)
        dx = dxc + dmu / self.batch_size

        self.dbeta = dbeta
        self.dgamma = dgamma

        return dx
