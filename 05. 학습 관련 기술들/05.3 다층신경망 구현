# 다층신경망(배치정규화, 드롭아웃, 가중치 규제)
class MultiLayerNetExtend:
    def __init__(self, input_size, hidden_size_list, output_size,
                 activation="relu", weight_init_std="relu", weight_decay_lambda=0,
                 use_batchnorm=False, use_dropout=False, dropout_ratio=0.5):
        self.params = {}
        self.input_size = input_size
        self.hidden_size_list = hidden_size_list
        self.hidden_layer_num = len(hidden_size_list)
        self.output_size = output_size
        self.weight_decay_lambda = weight_decay_lambda
        self.use_batchnorm = use_batchnorm
        self.use_dropout = use_dropout

        # 가중치 초기화
        self.__init_weight(weight_init_std)

        # 계층 생성
        activation_layer = {"sigmoid": Sigmoid, "relu": Relu}
        self.layers = OrderedDict()

        for idx in range(1, self.hidden_layer_num+1):
            self.layers["Affine" + str(idx)] = Affine(self.params["W" + str(idx)], self.params["b" + str(idx)])
            if self.use_batchnorm == True:
                self.params["gamma" + str(idx)] = np.ones(hidden_size_list[idx-1])
                self.params["beta" + str(idx)] = np.zeros(hidden_size_list[idx-1])
                self.layers["BatchNorm" + str(idx)] = BatchNormalization(self.params["gamma" + str(idx)], self.params["beta" + str(idx)])
            
            self.layers["Activation_function" + str(idx)] = activation_layer[activation]()
            
            if self.use_dropout == True:
                self.layers["Dropout" + str(idx)] = Dropout(dropout_ratio)
        
        idx = self.hidden_layer_num + 1

        self.layers["Affine" + str(idx)] = Affine(self.params["W" + str(idx)], self.params["b" + str(idx)])
        self.lastlayer = SoftmaxWithLoss()
    
    def __init_weight(self, weight_init_std):
        all_size_list = [self.input_size] + self.hidden_size_list + [self.output_size] # [784, 100, 100, 100, 100, 100, 100, 10] / len(all_size_list)=8
        for idx in range(1, len(all_size_list)): # 1, 2, 3, 4, 5, 6, 7
            scale = weight_init_std
            if str(weight_init_std).lower() in ("relu", "he"):
                scale = np.sqrt(2.0 / all_size_list[idx-1])
            elif str(weight_init_std).lower() in ("sigmoid", "xavier"):
                scale = np.sqrt(1.0 / all_size_list[idx-1])
            
            self.params["W" + str(idx)] = scale * np.random.randn(all_size_list[idx-1], all_size_list[idx])
            self.params["b" + str(idx)] = np.zeros(all_size_list[idx])
    
    def predict(self, x, train_flg=False):
        for key, layer in self.layers.items():
            if "Dropout" in key or "BatchNorm" in key:
                x = layer.forward(x, train_flg)
            else:
                x = layer.forward(x)
        
        return x
    
    def loss(self, x, t, train_flg=False):
        y = self.predict(x, train_flg)

        # 가중치 규제
        weight_decay = 0
        for idx in range(1, self.hidden_layer_num+2):
            W = self.params["W" + str(idx)]
            weight_decay += 0.5 * self.weight_decay_lambda * np.sum(W**2)
        
        return self.lastlayer.forward(y, t) + weight_decay
    
    def accuracy(self, x, t):
        y = self.predict(x, train_flg=False)
        y = np.argmax(y, axis=1)
        if t.ndim != 1:
            t = np.argmax(t, axis=1)
        
        accuracy = np.sum(y == t) / float(x.shape[0])
        
        return accuracy
    
    # 수치미분
    def numerical_gradient(self, x, t):
        loss_W = lambda W: self.loss(x, t, train_flg=True)
        
        grads = {}
        for idx in range(1, self.hidden_layer_num+2): # 1, 2, 3, 4, 5, 6, 7
            grads["W" + str(idx)] = numerical_gradient(loss_W, self.params["W" + str(idx)])
            grads["b" + str(idx)] = numerical_gradient(loss_W, self.params["b" + str(idx)])
            if self.use_batchnorm == True and idx != self.hidden_layer_num+1: # idx != 7 => 마지막 Affine 계층에서는 배치 정규화 X
                grads["gamma" + str(idx)] = numerical_gradient(loss_W, self.params["gamma" + str(idx)])
                grads["beta" + str(idx)] = numerical_gradient(loss_W, self.params["beta" + str(idx)])
        
        return grads
    
    # 역전파
    def gradient(self, x, t):
        # 순전파
        self.loss(x, t, train_flg=True)

        # 역전파
        dout = 1
        # SoftmaxWithLoss 역전파
        dout = self.lastlayer.backward(dout)
        # 계층 거꾸로
        layers = list(self.layers.values())
        layers.reverse()
        for layer in layers:
            dout = layer.backward(dout)
        
        # 결과 저장
        grads = {}
        for idx in range(1, self.hidden_layer_num+2):
            grads["W" + str(idx)] = self.layers["Affine" + str(idx)].dW + self.weight_decay_lambda * self.params["W" + str(idx)]
            grads["b" + str(idx)] = self.layers["Affine" + str(idx)].db
            if self.use_batchnorm == True and idx != self.hidden_layer_num+1:
                grads["gamma" + str(idx)] = self.layers["BatchNorm" + str(idx)].dgamma
                grads["beta" + str(idx)] = self.layers["BatchNorm" + str(idx)].dbeta

        return grads
